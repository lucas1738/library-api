plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.lucasbarbosa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntime.extendsFrom testRuntime

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }

    contractTest {
        java {
            srcDirs = ['src/contractTest/java']
        }

        resources {
            srcDirs = ['src/contractTest/resources']
        }

        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-client', version: '2.2.5.RELEASE'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.5.RELEASE'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    implementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.hibernate:hibernate-jpamodelgen'
    annotationProcessor('org.hibernate:hibernate-jpamodelgen')
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
}

task contractTest(type: Test) {
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

    doLast { println 'Contract Tests Done' }
}

task stage(type: GradleBuild) {
    tasks = ['clean', 'build']
    doLast { println 'Stagging Done' }
}

task quality(type: GradleBuild) {
    tasks = ['clean', 'test', 'contractTest']
    doLast { println 'Quality Assurance Done' }
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

check.dependsOn contractTest

test {
    useJUnitPlatform()
}






